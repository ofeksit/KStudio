var capacitorLiveUpdates = (function (exports, core) {
    'use strict';

    const LiveUpdates = core.registerPlugin('LiveUpdates', {
        web: () => new LiveUpdatesWeb(),
    });
    const sync = async (progress = undefined) => {
        return new Promise((resolve, reject) => {
            LiveUpdates.sync({}, (result) => {
                if ('progress' in result) {
                    if (progress) {
                        progress(result.progress);
                    }
                }
                else if ('failStep' in result) {
                    reject(result);
                }
                else {
                    resolve(result);
                }
            });
        });
    };
    const setConfig = async (config) => {
        return LiveUpdates.setConfig(config);
    };
    const getConfig = async () => {
        return LiveUpdates.getConfig();
    };
    const resetConfig = async () => {
        return LiveUpdates.resetConfig();
    };
    const reload = async () => {
        return LiveUpdates.reload();
    };
    class LiveUpdatesWeb extends core.WebPlugin {
        async sync(_options, callback) {
            callback({
                failStep: 'CHECK',
                message: 'Not implemented for web only',
            });
            return '';
        }
        /* eslint-disable */
        //@ts-ignore
        async setConfig(config) { }
        async getConfig() {
            return {};
        }
        async resetConfig() { }
        async reload() { }
    }

    exports.getConfig = getConfig;
    exports.reload = reload;
    exports.resetConfig = resetConfig;
    exports.setConfig = setConfig;
    exports.sync = sync;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

})({}, capacitorExports);
//# sourceMappingURL=plugin.js.map
