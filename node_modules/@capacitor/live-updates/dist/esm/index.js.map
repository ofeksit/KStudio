{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAsB5D,MAAM,WAAW,GAAG,cAAc,CAAoB,aAAa,EAAE;IACnE,GAAG,EAAE,GAAG,EAAE,CAAC,IAAI,cAAc,EAAE;CAChC,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,IAAI,GAAG,KAAK,EACvB,WAAuD,SAAS,EAC3C,EAAE;IACvB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,WAAW,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,MAA+C,EAAE,EAAE;YACvE,IAAI,UAAU,IAAI,MAAM,EAAE;gBACxB,IAAI,QAAQ,EAAE;oBACZ,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;iBAC3B;aACF;iBAAM,IAAI,UAAU,IAAI,MAAM,EAAE;gBAC/B,MAAM,CAAC,MAAM,CAAC,CAAC;aAChB;iBAAM;gBACL,OAAO,CAAC,MAAM,CAAC,CAAC;aACjB;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,SAAS,GAAG,KAAK,EAAE,MAAwB,EAAiB,EAAE;IACzE,OAAO,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;AACvC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,SAAS,GAAG,KAAK,IAA+B,EAAE;IAC7D,OAAO,WAAW,CAAC,SAAS,EAAE,CAAC;AACjC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,KAAK,IAAmB,EAAE;IACnD,OAAO,WAAW,CAAC,WAAW,EAAE,CAAC;AACnC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,MAAM,GAAG,KAAK,IAAmB,EAAE;IAC9C,OAAO,WAAW,CAAC,MAAM,EAAE,CAAC;AAC9B,CAAC,CAAC;AAEF,MAAM,cAAe,SAAQ,SAAS;IACpC,KAAK,CAAC,IAAI,CACR,QAAiB,EACjB,QAAmE;QAEnE,QAAQ,CAAC;YACP,QAAQ,EAAE,OAAO;YACjB,OAAO,EAAE,8BAA8B;SACxC,CAAC,CAAC;QACH,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,oBAAoB;IACpB,YAAY;IACZ,KAAK,CAAC,SAAS,CAAC,MAAkB,IAAkB,CAAC;IACrD,KAAK,CAAC,SAAS;QACb,OAAO,EAAE,CAAC;IACZ,CAAC;IACD,KAAK,CAAC,WAAW,KAAmB,CAAC;IACrC,KAAK,CAAC,MAAM,KAAmB,CAAC;CAEjC;AAED,cAAc,eAAe,CAAC","sourcesContent":["import { registerPlugin, WebPlugin } from '@capacitor/core';\n\nimport type {\n  LiveUpdateConfig,\n  LiveUpdateResult,\n  SyncResult,\n} from './definitions';\n\ninterface LiveUpdatesPlugin {\n  /**\n   * Sync the app with Live Updates\n   */\n  sync(\n    options: unknown,\n    callback: (result: { progress: number } | LiveUpdateResult) => void,\n  ): Promise<string>;\n  setConfig(config: LiveUpdateConfig): Promise<void>;\n  getConfig(): Promise<LiveUpdateConfig>;\n  resetConfig(): Promise<void>;\n  reload(): Promise<void>;\n}\n\nconst LiveUpdates = registerPlugin<LiveUpdatesPlugin>('LiveUpdates', {\n  web: () => new LiveUpdatesWeb(),\n});\n\nexport const sync = async (\n  progress: ((percentage: number) => void) | undefined = undefined,\n): Promise<SyncResult> => {\n  return new Promise((resolve, reject) => {\n    LiveUpdates.sync({}, (result: { progress: number } | LiveUpdateResult) => {\n      if ('progress' in result) {\n        if (progress) {\n          progress(result.progress);\n        }\n      } else if ('failStep' in result) {\n        reject(result);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n};\n\nexport const setConfig = async (config: LiveUpdateConfig): Promise<void> => {\n  return LiveUpdates.setConfig(config);\n};\n\nexport const getConfig = async (): Promise<LiveUpdateConfig> => {\n  return LiveUpdates.getConfig();\n};\n\nexport const resetConfig = async (): Promise<void> => {\n  return LiveUpdates.resetConfig();\n};\n\nexport const reload = async (): Promise<void> => {\n  return LiveUpdates.reload();\n};\n\nclass LiveUpdatesWeb extends WebPlugin implements LiveUpdatesPlugin {\n  async sync(\n    _options: unknown,\n    callback: (result: { progress: number } | LiveUpdateResult) => void,\n  ): Promise<string> {\n    callback({\n      failStep: 'CHECK',\n      message: 'Not implemented for web only',\n    });\n    return '';\n  }\n\n  /* eslint-disable */\n  //@ts-ignore\n  async setConfig(config: LiveUpdate): Promise<void> {}\n  async getConfig(): Promise<LiveUpdateConfig> {\n    return {};\n  }\n  async resetConfig(): Promise<void> {}\n  async reload(): Promise<void> {}\n  /* eslint-enable */\n}\n\nexport * from './definitions';\n"]}